{"name":"-Git笔记","slug":"Git笔记","count":1,"postlist":[{"title":"Git小白指令","slug":"Git小白指令","date":"2019-07-04T18:08:43.000Z","updated":"2019-10-09T08:53:26.505Z","comments":true,"path":"api/articles/Git小白指令.json","excerpt":"","keywords":null,"cover":null,"content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;因为最近写博客，需要上传GitHub,况且公司用的也是Git，所以准备花时间去学习一下，<br>&nbsp;&nbsp;&nbsp;&nbsp;关于Git的指令，参照廖雪峰老师的教程来的，然后下面记录一下</p>\n<ul>\n<li>git add ./xxx.txt  这个表示将写好的代码添加到本地的仓库 ，add . 表示直接添加目录下所有文件</li>\n<li>git commit -m “提交日志”  这个命令表示将添加到本地仓库的代码提交 ，</li>\n<li>git push -u origin master 表示将本地仓库的代码提交到github远程仓库，</li>\n<li>git pull origin master 表示将远程仓库的代码拉取与本地代码进行合并，</li>\n<li>git status  这个命令可以让我们了解当前仓库的状态，哪些文件已经修改但是还没有提交，</li>\n<li>git log 表示查看提交到git仓库的所有版本，</li>\n<li>git branch dev(分之的名称) 创建一个新的分支</li>\n<li>git checkout dev 选中新创建的分之进行操作</li>\n<li>git merge dev 在切换到master分支上 进行将dev分支的操作合并到master分支上</li>\n<li>git branch -d dev 将刚才已经操作过的分支删除</li>\n<li>git branch 查看当前所有分支</li>\n</ul>\n<p><strong>常见的报错</strong><br><em>一、</em> ![rejected] master-&gt; master( fetch first)  error failed to push some …</p>\n<p>出现的原因：出现这类问题大部分是因为上一次没有从远程直接拉取代码而直接上传。<br>解决方案：可以尝试 git pull origin master 先从远端拉取，再进行git push origin master</p>\n<center>未完待续.....</center>\n**工作流程**\n##### 关于Git，在工作中必须要掌握的一些技能，要记录下来。\n- 特地请教一位大佬的，然后借鉴[阮一峰的Git工作流程](http://www.ruanyifeng.com/blog/2015/12/git-workflow.html?tdsourcetag=s_pcqq_aiomsg)来记一下这个笔记。\n好多之前没有接触Git的小伙伴在刚开始工作时，对提交分支等概念比较模糊，其实当你多搞几次，就能真正理解了，\n在工作中，一般情况下是有一个**master**主分支（我喜欢叫他主干，一棵树最重要的部分），这个master你平常不会对它进行操作，因为这个分之基本上是每次提交重大版本，或者测试上线，或者发布重大功能的时候，才会进行操作，我们平常接触做多的是从这个主分支上面拉取下来的\n开发分之，可以叫他**develop**分之，可能你是和好几个同事共同参与、维护一个项目，你们每天日常的代码可以从这个dev分支上再拉取一个分之，这个分之作为自己的开发分之，当你完成某个功能模块可以将这个分之进行提交，提交到dev开发分之并合并，每位同事都是如此。\n如果公司只有你一个人负责这个项目的话，你可以无视开发分之，直接在主分支上进行推送和拉取，但是不建议这么做。\n\n<h5 id=\"Github-flow\"><a href=\"#Github-flow\" class=\"headerlink\" title=\"Github flow\"></a>Github flow</h5><ul>\n<li>github 只有一个长期分之，即<strong>master</strong>，<br>第一步：根据需求，从master拉出新分支，不区分功能分支或补丁分支。</li>\n</ul>\n<p>第二步：新分支开发完成后，或者需要讨论的时候，就向master发起一个pull request（简称PR）。</p>\n<p>第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。</p>\n<p>第四步：你的Pull Request被接受，合并进master，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）</p>\n","text":"&nbsp;&nbsp;&nbsp;&nbsp;因为最近写博客，需要上传GitHub,况且公司用的也是Git，所以准备花时间去学习一下，<br>&nbsp;&nbsp;&nbsp;&nbsp;关于Git的指令，参照廖雪峰老师的教程来的，然后下面记录一下git add ./xxx.","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-Git笔记","slug":"Git笔记","count":1,"path":"api/tags/Git笔记.json"}]}]}