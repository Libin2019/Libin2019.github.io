{"name":"-Git笔记","slug":"Git笔记","count":2,"postlist":[{"title":"Git--认知","slug":"git-学习笔记（一）","date":"2019-07-04T14:00:55.000Z","updated":"2019-07-04T18:08:01.466Z","comments":true,"path":"api/articles/git-学习笔记（一）.json","excerpt":"","keywords":null,"cover":null,"content":"<p>&nbsp;&nbsp;关于Git，借用廖雪峰老师的一句话，Git是目前世界上最先进的<strong>分布式</strong>版本控制系统（<strong>没有之一</strong>）。<br>记得进第一家公司的时候，当时是用的SVN，是一种<strong>集中式</strong>的版本控制系统，每天都去向中央服务器提交拉取代码，自我感觉体验良好。<br>可是为什么Git渐渐为大部分人所用呢，这就涉及到了集中式和分布式的区别：<br>&nbsp;&nbsp;<strong>集中式 ：</strong> 集中式的版本库是放在中央服务器的，每个工作人员需要进行代码推送或者拉取的时候，都是需要向这个中央服务器去发送请求，或者说都是需要经过这个中央服务器，<br>相当于把你们写过的代码保存到一个大的中央仓库里，可以保存 ，可以取出，但是每次取出之前需要提交上一次的保存，比较方便，不必担心自己电脑黑屏而导致代码丢失无法找回。<br>&nbsp;&nbsp;<strong>分布式 ：</strong> 分布式的版本库，类似于每个工作人员的电脑上都是一个最新的版本库，你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>\n<p>&nbsp;&nbsp;关于区别就写到这里吧 。 开始自己的笔记系列：<br>&nbsp;&nbsp;<strong>初次安装配置：</strong>(Windows上面安装)<br>&nbsp;&nbsp;&nbsp;&nbsp;一、首先去[Git中文网][1]下载Git版本控制客户端程序，一路Next。<br>&nbsp;&nbsp;&nbsp;&nbsp;二、下载完成后，点击鼠标右键，会发现有Git</p>\n<pre><code>未完待续。。。。。</code></pre>","text":"&nbsp;&nbsp;关于Git，借用廖雪峰老师的一句话，Git是目前世界上最先进的分布式版本控制系统（没有之一）。<br>记得进第一家公司的时候，当时是用的SVN，是一种集中式的版本控制系统，每天都去向中央服务器提交拉取代码，自我感觉体验良好。<br>可是为什么Git渐渐为大","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-Git笔记","slug":"Git笔记","count":2,"path":"api/tags/Git笔记.json"}]},{"title":"Git小白指令","slug":"Git小白指令","date":"2019-07-04T18:08:43.000Z","updated":"2019-07-06T15:48:51.300Z","comments":true,"path":"api/articles/Git小白指令.json","excerpt":"","keywords":null,"cover":null,"content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;因为最近写博客，需要上传GitHub,所以一直在花时间去学习，现在已经凌晨两点了，之所以还在坚持写，不为别的，只为弥补第一篇心得里面吹下的牛皮。<br>&nbsp;&nbsp;&nbsp;&nbsp;关于Git的指令，参照廖雪峰老师的教程来的，然后下面记录一下</p>\n<ul>\n<li>git add ./xxx.txt  这个表示将写好的代码添加到本地的仓库 ，add . 表示直接添加目录下所有文件</li>\n<li>git commit -m “提交日志”  这个命令表示将添加到本地仓库的代码提交 ，</li>\n<li>git push -u origin master 表示将本地仓库的代码提交到github远程仓库，</li>\n<li>git pull origin master 表示将远程仓库的代码拉取与本地代码进行合并，</li>\n<li>git status  这个命令可以让我们了解当前仓库的状态，哪些文件已经修改但是还没有提交，</li>\n<li>git log 表示查看提交到git仓库的所有版本，</li>\n<li>git branch dev(分之的名称) 创建一个新的分支</li>\n<li>git checkout dev 选中新创建的分之进行操作</li>\n<li>git merge dev 在切换到master分支上 进行将dev分支的操作合并到master分支上</li>\n<li>git branch -d dev 将刚才已经操作过的分支删除</li>\n<li>git branch 查看当前所有分支</li>\n</ul>\n<p><strong>常见的报错</strong><br><em>一、</em> ![rejected] master-&gt; master( fetch first)  error failed to push some …</p>\n<p>出现的原因：出现这类问题大部分是因为上一次没有从远程直接拉取代码而直接上传。<br>解决方案：可以尝试 git pull origin master 先从远端拉取，再进行git push origin master</p>\n<center>未完待续.....</center>\n","text":"&nbsp;&nbsp;&nbsp;&nbsp;因为最近写博客，需要上传GitHub,所以一直在花时间去学习，现在已经凌晨两点了，之所以还在坚持写，不为别的，只为弥补第一篇心得里面吹下的牛皮。<br>&nbsp;&nbsp;&nbsp;&nbsp;关于Git的指令，参照廖雪峰老师","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-Git笔记","slug":"Git笔记","count":2,"path":"api/tags/Git笔记.json"}]}]}