{"total":5,"pageSize":10,"pageCount":1,"data":[{"title":"flutter弹窗系列（二） ","slug":"flutter弹窗系列（二）","date":"2019-07-05T14:34:01.000Z","updated":"2019-07-05T18:29:22.602Z","comments":true,"path":"api/articles/flutter弹窗系列（二）.json","excerpt":"<p>关于flutter的弹窗，有好几种,对于这些个人还是感觉很迷迷瞪瞪的，所以在这里分别写一些demo进行对比，并加以区分，只单纯作为笔记参考。</p>\n<p><strong>一、SimpleDialog</strong><br> 先看一下flutter中文网对SimpleDialog的解释：<br>    <img src=\"/2019/07/05/flutter弹窗系列（二）/SimpleDialog.PNG\" alt></p>\n<p> 顾名思义，这是一个简易的dialog，可能实现的功能不会太多，自己尝试着写了一个简单的demo，仅供参考。<br>   <img src=\"/2019/07/05/flutter弹窗系列（二）/SimpleDemo.gif\" alt><br>    这是个最简单的demo，就是控制台显示用户所点击的列表项，当然，你也可以在每个onPressed下面添加一个<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigator.of(context).pop();</span><br><span class=\"line\">//用户每次点击完成之后将自动关闭弹窗</span><br></pre></td></tr></table></figure></p>","keywords":null,"cover":"/2019/07/05/flutter弹窗系列（二）/SimpleDialog.PNG","content":null,"text":"关于flutter的弹窗，有好几种,对于这些个人还是感觉很迷迷瞪瞪的，所以在这里分别写一些demo进行对比，并加以区分，只单纯作为笔记参考。一、SimpleDialog<br> 先看一下flutter中文网对SimpleDialog的解释：<br>     [Figure]   ","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-Flutter","slug":"Flutter","count":2,"path":"api/tags/Flutter.json"}]},{"title":"Git小白指令","slug":"Git小白指令","date":"2019-07-04T18:08:43.000Z","updated":"2019-07-05T18:23:37.599Z","comments":true,"path":"api/articles/Git小白指令.json","excerpt":"","keywords":null,"cover":null,"content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;因为最近写博客，需要上传GitHub,所以一直在花时间去学习，现在已经凌晨两点了，之所以还在坚持写，不为别的，只为弥补第一篇心得里面吹下的牛皮。<br>&nbsp;&nbsp;&nbsp;&nbsp;关于Git的指令，参照廖雪峰老师的教程来的，然后下面记录一下</p>\n<ul>\n<li>git add ./xxx.txt  这个表示将写好的代码添加到本地的仓库 ，add . 表示直接添加目录下所有文件</li>\n<li>git commit -m “提交日志”  这个命令表示将添加到本地仓库的代码提交 ，</li>\n<li>git push -u origin master 表示将本地仓库的代码提交到github远程仓库，</li>\n<li>git pull origin master 表示将远程仓库的代码拉取与本地代码进行合并，</li>\n<li>git status  这个命令可以让我们了解当前仓库的状态，哪些文件已经修改但是还没有提交，</li>\n<li>git log 表示查看提交到git仓库的所有版本，</li>\n<li>git branch dev(分之的名称) 创建一个新的分支</li>\n<li>git checkout dev 选中新创建的分之进行操作</li>\n<li>git merge dev 在切换到master分支上 进行将dev分支的操作合并到master分支上</li>\n<li>git branch -d dev 将刚才已经操作过的分支删除</li>\n<li>git branch 查看当前所有分支</li>\n</ul>\n<center>未完待续.....</center>\n","text":"&nbsp;&nbsp;&nbsp;&nbsp;因为最近写博客，需要上传GitHub,所以一直在花时间去学习，现在已经凌晨两点了，之所以还在坚持写，不为别的，只为弥补第一篇心得里面吹下的牛皮。<br>&nbsp;&nbsp;&nbsp;&nbsp;关于Git的指令，参照廖雪峰老师","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-Git笔记","slug":"Git笔记","count":2,"path":"api/tags/Git笔记.json"}]},{"title":"Flutter踩坑记---关于SimpleDialog报错","slug":"Flutter","date":"2019-07-04T17:52:00.000Z","updated":"2019-07-05T18:31:01.099Z","comments":true,"path":"api/articles/Flutter.json","excerpt":"<p>看了好久的官网，对于官方文档给的这个demo，始终不太明白，今天将报错百度了一下，终于解惑了。直接上SimpleDialog正确写法的demo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main() =&gt;runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget&#123;</span><br><span class=\"line\">  @override </span><br><span class=\"line\">  Widget build(BuildContext context)&#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      home: Dlog()</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Dlog extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _DlogState createState() =&gt; _DlogState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _DlogState extends State&lt;Dlog&gt; &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      home: Scaffold(</span><br><span class=\"line\">        body: Center(</span><br><span class=\"line\">          child: Container(</span><br><span class=\"line\">            child: MaterialButton(</span><br><span class=\"line\">              child: Text(&quot;点我一下&quot;),</span><br><span class=\"line\">              onPressed: ()&#123;</span><br><span class=\"line\">                showDialog(</span><br><span class=\"line\">                  context: context,</span><br><span class=\"line\">                  builder: (BuildContext context)&#123;</span><br><span class=\"line\">                    return SimpleDialog(</span><br><span class=\"line\">                      title: Text(&quot;我是title&quot;),</span><br><span class=\"line\">                      children: &lt;Widget&gt;[</span><br><span class=\"line\">                        SimpleDialogOption(</span><br><span class=\"line\">                          child: Text(&quot;选项一&quot;),</span><br><span class=\"line\">                          onPressed: ()&#123; print(&quot;选项一&quot;);&#125;,</span><br><span class=\"line\">                        ),</span><br><span class=\"line\">                        SimpleDialogOption(</span><br><span class=\"line\">                          child: Text(&quot;选项二&quot;),</span><br><span class=\"line\">                          onPressed: ()&#123; print(&quot;选项二&quot;);&#125;,</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                      ],</span><br><span class=\"line\">                    );</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                ).then((val)&#123;</span><br><span class=\"line\">                  print(val);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","keywords":null,"cover":"/2019/07/05/Flutter/simpleDialogError.PNG","content":null,"text":"看了好久的官网，对于官方文档给的这个demo，始终不太明白，今天将报错百度了一下，终于解惑了。直接上SimpleDialog正确写法的demo1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-Flutter","slug":"Flutter","count":2,"path":"api/tags/Flutter.json"}]},{"title":"Git--认知","slug":"git-学习笔记（一）","date":"2019-07-04T14:00:55.000Z","updated":"2019-07-04T18:08:01.466Z","comments":true,"path":"api/articles/git-学习笔记（一）.json","excerpt":"","keywords":null,"cover":null,"content":"<p>&nbsp;&nbsp;关于Git，借用廖雪峰老师的一句话，Git是目前世界上最先进的<strong>分布式</strong>版本控制系统（<strong>没有之一</strong>）。<br>记得进第一家公司的时候，当时是用的SVN，是一种<strong>集中式</strong>的版本控制系统，每天都去向中央服务器提交拉取代码，自我感觉体验良好。<br>可是为什么Git渐渐为大部分人所用呢，这就涉及到了集中式和分布式的区别：<br>&nbsp;&nbsp;<strong>集中式 ：</strong> 集中式的版本库是放在中央服务器的，每个工作人员需要进行代码推送或者拉取的时候，都是需要向这个中央服务器去发送请求，或者说都是需要经过这个中央服务器，<br>相当于把你们写过的代码保存到一个大的中央仓库里，可以保存 ，可以取出，但是每次取出之前需要提交上一次的保存，比较方便，不必担心自己电脑黑屏而导致代码丢失无法找回。<br>&nbsp;&nbsp;<strong>分布式 ：</strong> 分布式的版本库，类似于每个工作人员的电脑上都是一个最新的版本库，你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>\n<p>&nbsp;&nbsp;关于区别就写到这里吧 。 开始自己的笔记系列：<br>&nbsp;&nbsp;<strong>初次安装配置：</strong>(Windows上面安装)<br>&nbsp;&nbsp;&nbsp;&nbsp;一、首先去[Git中文网][1]下载Git版本控制客户端程序，一路Next。<br>&nbsp;&nbsp;&nbsp;&nbsp;二、下载完成后，点击鼠标右键，会发现有Git</p>\n<pre><code>未完待续。。。。。</code></pre>","text":"&nbsp;&nbsp;关于Git，借用廖雪峰老师的一句话，Git是目前世界上最先进的分布式版本控制系统（没有之一）。<br>记得进第一家公司的时候，当时是用的SVN，是一种集中式的版本控制系统，每天都去向中央服务器提交拉取代码，自我感觉体验良好。<br>可是为什么Git渐渐为大","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-Git笔记","slug":"Git笔记","count":2,"path":"api/tags/Git笔记.json"}]},{"title":"FirstArticle","slug":"FirstArticle","date":"2019-07-03T14:18:40.000Z","updated":"2019-07-04T18:05:48.972Z","comments":true,"path":"api/articles/FirstArticle.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"爱学习，爱生活！（个人博客开启前端学习生涯）\"><a href=\"#爱学习，爱生活！（个人博客开启前端学习生涯）\" class=\"headerlink\" title=\"爱学习，爱生活！（个人博客开启前端学习生涯）\"></a><center>爱学习，爱生活！（个人博客开启前端学习生涯）<center></center></center></h1><hr>\n<p>  &emsp;&emsp;千呼万唤始出来，终于实现了简易的个人博客，计划是先在个人博客上面去记录一些前端学习笔记，后期再通过Node+Vue去实现一个正儿八经的个人主页！<br>  &emsp;&emsp;刚入行没多久，对于前端知识认识尚浅，只是见得技术更新实在是有点快，自学的时候，刚接触JQuery，感觉用起来好舒服啊，什么getElementById() ,querySelector(),全都一个“$”代替，简直写起来不要太爽，一个月后我出去找工作，公司要求用Vue去写后台管理的一个项目，当时心里想，难道还有比JQuery还要好用的js框架吗，直到两个周之后，我能够写一些简单的Vue小demo，才深深感到没有早点去接触这个框架，正如文档介绍所说：响应式，数据驱动视图，不再频繁的去操作DOM节点写一些交互，这些都是jQuery无法做到的，正如React Angular一样，类似于<strong>MVVM模式</strong>（M:Model，V：View，VM：数据驱动视图层，更大程度上释放了DOM，进一步提高了性能<br>  &emsp;&emsp;总之，前端变化之快，<strong>React</strong>，<strong>TypeScript</strong>，以及最近大火的<strong>Flutter</strong>，前端就是这样，只能不断的学习，才能去拥抱变化。也是之所以先搭建了简易博客的原因之一，就是想不断督促自己去学习,只有这样，才能去实现个人小小的梦想。    </p>\n","text":"爱学习，爱生活！（个人博客开启前端学习生涯）  &emsp;&emsp;千呼万唤始出来，终于实现了简易的个人博客，计划是先在个人博客上面去记录一些前端学习笔记，后期再通过Node+Vue去实现一个正儿八经的个人主页！<br>  &emsp;&emsp;刚入行没多久，对于前端知识认","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"个人心得","slug":"个人心得","count":1,"path":"api/tags/个人心得.json"}]}]}