{"title":"js的变量提升","slug":"js的变量提升","date":"2019-07-15T15:31:28.000Z","updated":"2019-07-15T17:36:39.567Z","comments":true,"path":"api/articles/js的变量提升.json","photos":[],"link":"","excerpt":null,"covers":["/2019/07/15/js的变量提升/window.PNG"],"content":"<p><strong>这一篇是关于JavaScript的变量提升</strong></p>\n<p>首先，Js中有一个全局对象Window,所有的表达式都在当前的环境中计算，所以全局对象的属性可以当做全局变量来用，比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\t\twindow.console.log(&quot;helloworld&quot;);</span><br><span class=\"line\">\t\t\twindow.document.write(&quot;我是文本&quot;)</span><br><span class=\"line\">\t\t&lt;/script&gt;</span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/07/15/js的变量提升/window.PNG\" alt><br>所以我们也可以写成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\t\tconsole.log(&quot;helloworld&quot;);</span><br><span class=\"line\">\t\t\tdocument.write(&quot;我是文本&quot;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果是一样的，但是有一点你要注意，这一切都是在浏览器的环境下运行的，如果你去尝试在Node的环境下去编译window.console.log(“11”),他会报错的，因为在Node中，全局对象并不是Window了，而是global，除了他本身，所有的全局变量都是他的属性。<br>所以看下这个基本的题，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1 ;//这个时候，你定义了一个全局的变量，可以直接通过window.a来调用</span><br><span class=\"line\">console.log(a);// 1</span><br><span class=\"line\">console.log(window.a)// 1</span><br><span class=\"line\">console.log(typeof window.a);// number</span><br><span class=\"line\">console.log(typeof a);// number</span><br></pre></td></tr></table></figure>\n\n<p>了解了相关的知识后，咱们通过一个列子进入正题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 3 ;</span><br><span class=\"line\"></span><br><span class=\"line\">function getA()&#123;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    var a  = 1 ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getA();</span><br></pre></td></tr></table></figure>\n\n<p>聪明的你，猜一猜控制台打印的结果是什么？<br>打印3 是错误的，打印1 也是错误的，来分析一下这个，<br>首先我们定义了一个全局变量 a 初始化值为 a = 3 ; 然后程序继续执行，在进入到函数内部中，就形成了块级作用域，<br>即要求先打印a的值 ，于是他会优先在函数内部去寻找变量a ，如果找到 就打印 ，找不到就会去全局变量中找，如果再找不到，这个变量就是未定义的<code>undefined</code>，这个时候我们可以看到<br>局部变量中是有a的，所以你高高兴兴的认为 控制台会打印 1，实际上这是错误的，找到a是不假，但是由于函数的变量提升，上述代码可以写成这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 3 ;</span><br><span class=\"line\"></span><br><span class=\"line\">function getA()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var a ;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    a  = 1 ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getA();</span><br></pre></td></tr></table></figure>\n\n<p>这时候的打印结果就是 <code>undefined</code>，在js中不管是在函数内部或者全局作用域的哪个位置，当你用var 声明了一个变量，js将会优先去解析他，不管这个变量有没有初始化，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(a)//undefined</span><br><span class=\"line\"></span><br><span class=\"line\">var a = 4 ;</span><br><span class=\"line\">//实际上,js将这段代码解析为:</span><br><span class=\"line\">var a ;</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\">a = 4;</span><br><span class=\"line\">//这就是所谓的变量提升</span><br></pre></td></tr></table></figure>\n\n<p>再来看 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var b = 4;</span><br><span class=\"line\"></span><br><span class=\"line\">function getB()&#123;</span><br><span class=\"line\">    window.b =3 ;</span><br><span class=\"line\">    console.log(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getB();</span><br></pre></td></tr></table></figure>\n\n<p>这个结果你应该猜到了，没错，是3 ，首先定义了全局变量b ， 然后我们在函数内部中修改了全局变量b，打印的时候优先去函数内部寻找变量b，<br>window.b 在这个时候相当于重新给全局变量b赋了一个值，所以会打印出3</p>\n<p>最后一题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var c = 1 ;</span><br><span class=\"line\">function getC()&#123;</span><br><span class=\"line\">    window.c = 2 ;</span><br><span class=\"line\">    console.log(c);</span><br><span class=\"line\">    var c ;</span><br><span class=\"line\">    console.log(window.c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getC();</span><br></pre></td></tr></table></figure>\n\n<p>分析一下：在函数内部中，函数变量提升，我们可以写成这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    var c ;</span><br><span class=\"line\">    window.c = 2;</span><br><span class=\"line\">    console.log(c);</span><br><span class=\"line\">    console.log(window.c);</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>这样一分析，是不是就 拨开云雾见光明了 。。。 第一个优先去函数内部中找c，发现c没有定义 ，所以第一个打印<code>undefined</code>,第二个指明了去找window.c，于是第二个应该打印为 2 。</p>\n","categories":[],"tags":[{"name":"-JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}]}