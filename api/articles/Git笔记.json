{"title":"Git笔记","slug":"Git笔记","date":"2019-09-27T12:13:39.000Z","updated":"2019-09-27T12:47:33.729Z","comments":true,"path":"api/articles/Git笔记.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h5 id=\"关于Git，在工作中必须要掌握的一些技能，要记录下来。\"><a href=\"#关于Git，在工作中必须要掌握的一些技能，要记录下来。\" class=\"headerlink\" title=\"关于Git，在工作中必须要掌握的一些技能，要记录下来。\"></a>关于Git，在工作中必须要掌握的一些技能，要记录下来。</h5><ul>\n<li>特地请教一位大佬的，然后借鉴<a href=\"http://www.ruanyifeng.com/blog/2015/12/git-workflow.html?tdsourcetag=s_pcqq_aiomsg\" target=\"_blank\" rel=\"noopener\">阮一峰的Git工作流程</a>来记一下这个笔记。<br>好多之前没有接触Git的小伙伴在刚开始工作时，对提交分支等概念比较模糊，其实当你多搞几次，就能真正理解了，<br>在工作中，一般情况下是有一个<strong>master</strong>主分支（我喜欢叫他主干，一棵树最重要的部分），这个master你平常不会对它进行操作，因为这个分之基本上是每次提交重大版本，或者测试上线，或者发布重大功能的时候，才会进行操作，我们平常接触做多的是从这个主分支上面拉取下来的<br>开发分之，可以叫他<strong>develop</strong>分之，可能你是和好几个同事共同参与、维护一个项目，你们每天日常的代码可以从这个dev分支上再拉取一个分之，这个分之作为自己的开发分之，当你完成某个功能模块可以将这个分之进行提交，提交到dev开发分之并合并，每位同事都是如此。<br>如果公司只有你一个人负责这个项目的话，你可以无视开发分之，直接在主分支上进行推送和拉取，但是不建议这么做。</li>\n</ul>\n<h5 id=\"Github-flow\"><a href=\"#Github-flow\" class=\"headerlink\" title=\"Github flow\"></a>Github flow</h5><ul>\n<li>github 只有一个长期分之，即<strong>master</strong>，<br>第一步：根据需求，从master拉出新分支，不区分功能分支或补丁分支。</li>\n</ul>\n<p>第二步：新分支开发完成后，或者需要讨论的时候，就向master发起一个pull request（简称PR）。</p>\n<p>第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。</p>\n<p>第四步：你的Pull Request被接受，合并进master，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）</p>\n","categories":[],"tags":[{"name":"-Git笔记","slug":"Git笔记","count":2,"path":"api/tags/Git笔记.json"}]}