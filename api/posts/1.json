{"total":9,"pageSize":10,"pageCount":1,"data":[{"title":"js的变量提升","slug":"js的变量提升","date":"2019-07-15T15:31:28.000Z","updated":"2019-08-06T14:01:12.185Z","comments":true,"path":"api/articles/js的变量提升.json","excerpt":"","keywords":null,"cover":"/2019/07/15/js的变量提升/window.PNG","content":"<p><strong>这一篇是关于JavaScript的变量提升</strong></p>\n<p>首先，Js中有一个全局对象Window,所有的表达式都在当前的环境中计算，所以全局对象的属性可以当做全局变量来用，比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\t\twindow.console.log(&quot;helloworld&quot;);</span><br><span class=\"line\">\t\t\twindow.document.write(&quot;我是文本&quot;)</span><br><span class=\"line\">\t\t&lt;/script&gt;</span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/07/15/js的变量提升/window.PNG\" alt><br>所以我们也可以写成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\t\tconsole.log(&quot;helloworld&quot;);</span><br><span class=\"line\">\t\t\tdocument.write(&quot;我是文本&quot;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果是一样的，但是有一点你要注意，这一切都是在浏览器的环境下运行的，如果你去尝试在Node的环境下去编译window.console.log(“11”),他会报错的，因为在Node中，全局对象并不是Window了，而是global，除了他本身，所有的全局变量都是他的属性。<br>所以看下这个基本的题，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1 ;//这个时候，你定义了一个全局的变量，可以直接通过window.a来调用</span><br><span class=\"line\">console.log(a);// 1</span><br><span class=\"line\">console.log(window.a)// 1</span><br><span class=\"line\">console.log(typeof window.a);// number</span><br><span class=\"line\">console.log(typeof a);// number</span><br></pre></td></tr></table></figure>\n\n<p>了解了相关的知识后，咱们通过一个列子进入正题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 3 ;</span><br><span class=\"line\"></span><br><span class=\"line\">function getA()&#123;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    var a  = 1 ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getA();</span><br></pre></td></tr></table></figure>\n\n<p>聪明的你，猜一猜控制台打印的结果是什么？<br>打印3 是错误的，打印1 也是错误的，来分析一下这个，<br>首先我们定义了一个全局变量 a 初始化值为 a = 3 ; 然后程序继续执行，在进入到函数内部中，就形成了块级作用域，<br>即要求先打印a的值 ，于是他会优先在函数内部去寻找变量a ，如果找到 就打印 ，找不到就会去全局变量中找，如果再找不到，这个变量就是未定义的<code>undefined</code>，这个时候我们可以看到<br>局部变量中是有a的，所以你高高兴兴的认为 控制台会打印 1，实际上这是错误的，找到a是不假，但是由于函数的变量提升，上述代码可以写成这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 3 ;</span><br><span class=\"line\"></span><br><span class=\"line\">function getA()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var a ;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    a  = 1 ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getA();</span><br></pre></td></tr></table></figure>\n\n<p>这时候的打印结果就是 <code>undefined</code>，在js中不管是在函数内部或者全局作用域的哪个位置，当你用var 声明了一个变量，js将会优先去解析他，不管这个变量有没有初始化，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(a)//undefined</span><br><span class=\"line\"></span><br><span class=\"line\">var a = 4 ;</span><br><span class=\"line\">//实际上,js将这段代码解析为:</span><br><span class=\"line\">var a ;</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\">a = 4;</span><br><span class=\"line\">//这就是所谓的变量提升</span><br></pre></td></tr></table></figure>\n\n<p>再来看 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var b = 4;</span><br><span class=\"line\"></span><br><span class=\"line\">function getB()&#123;</span><br><span class=\"line\">    window.b =3 ;</span><br><span class=\"line\">    console.log(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getB();</span><br></pre></td></tr></table></figure>\n\n<p>这个结果你应该猜到了，没错，是3 ，首先定义了全局变量b ， 然后我们在函数内部中修改了全局变量b，打印的时候优先去函数内部寻找变量b，<br>window.b 在这个时候相当于重新给全局变量b赋了一个值，所以会打印出3</p>\n<p>最后一题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var c = 1 ;</span><br><span class=\"line\">function getC()&#123;</span><br><span class=\"line\">    window.c = 2 ;</span><br><span class=\"line\">    console.log(c);</span><br><span class=\"line\">    var c ;</span><br><span class=\"line\">    console.log(window.c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getC();</span><br></pre></td></tr></table></figure>\n\n<p>分析一下：在函数内部中，函数变量提升，我们可以写成这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    var c ;</span><br><span class=\"line\">    window.c = 2;</span><br><span class=\"line\">    console.log(c);</span><br><span class=\"line\">    console.log(window.c);</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>这样一分析，是不是就 拨开云雾见光明了 。。。 第一个优先去函数内部中找c，发现c没有定义 ，所以第一个打印<code>undefined</code>,第二个指明了去找window.c，于是第二个应该打印为 2 。</p>\n","text":"这一篇是关于JavaScript的变量提升首先，Js中有一个全局对象Window,所有的表达式都在当前的环境中计算，所以全局对象的属性可以当做全局变量来用，比如1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}]},{"title":"flutter_widgets","slug":"flutter-widgets","date":"2019-07-13T12:08:51.000Z","updated":"2019-08-06T14:01:11.841Z","comments":true,"path":"api/articles/flutter-widgets.json","excerpt":"","keywords":null,"cover":"/2019/07/13/flutter-widgets/no_wh.PNG","content":"<p><strong>Flutter常用组件</strong></p>\n<ul>\n<li>容器组件</li>\n<li>文本组件</li>\n<li>图片组件</li>\n<li>图标组件<ul>\n<li>图标组件</li>\n<li>图标按钮组件</li>\n<li>凸起按钮组件</li>\n</ul>\n</li>\n<li>列表组件<ul>\n<li>基础列表组件</li>\n<li>水平列表组件</li>\n<li>长列表组件</li>\n<li>网格列表组件</li>\n</ul>\n</li>\n<li>表单组件</li>\n</ul>\n<hr>\n<p><strong>一、容器组件</strong></p>\n<p>Container类似于HTML中的Div（盒子），里面用来容纳子元素，自身具备一些属性，用来调整<br>子元素的位置及自身样式。</p>\n<p>首先，你应该要知道这些：</p>\n<ol>\n<li>如果不给Container设置宽高，但是这个容器有子元素，那么这个容器的大小是由子元素（child）的大小决定的：<br><img src=\"/2019/07/13/flutter-widgets/no_wh.PNG\" alt></li>\n<li>如果给Container设置高度，容器没有子元素，那么这个容器的宽度默认为当前设备屏幕的宽度，高度为赋值的高度，<br><img src=\"/2019/07/13/flutter-widgets/no_child.PNG\" alt></li>\n<li>如果给Container设置高度，容器有子元素，那么这个容器的宽度默认为子元素的宽度，高度为赋值的高度<br><img src=\"/2019/07/13/flutter-widgets/have_child.PNG\" alt></li>\n</ol>\n<p>看一下他的的构造函数:<br><img src=\"/2019/07/13/flutter-widgets/Container.PNG\" alt><br>通一下Container的这些属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.alignment,用来快速调整子元素的位置，9个方位(topLeft,topCenter,topRight)</span><br><span class=\"line\">this.padding,众所周知,类似于盒模型的内边距</span><br><span class=\"line\">Color color,Container的背景颜色</span><br><span class=\"line\">Decoration decoration,一个很强大的属性，直译为装饰，通过此属性可设置容器的边框，阴影，渐变，圆角等样式效果</span><br><span class=\"line\">this.foregroundDecoration,子元素的前景色</span><br><span class=\"line\">double width,容器的高度</span><br><span class=\"line\">double height,容器的宽度</span><br><span class=\"line\">BoxConstraints constraints,盒约束，类似于 min-width,max-height 等</span><br><span class=\"line\">this.margin,同padding</span><br><span class=\"line\">this.transform,平移 缩放 旋转 ， 主要适用于动画</span><br><span class=\"line\">this.child,</span><br></pre></td></tr></table></figure>\n\n<p>Tip:</p>\n<ul>\n<li><p>alignment的属性值除了可以写成诸如topLeft,也可以使用坐标表示Alignment(x,y)，以center为原点的坐标轴<br><img src=\"/2019/07/13/flutter-widgets/Alignment.PNG\" alt>,具体用法看源码。</p>\n</li>\n<li><p>padding属性值的多种表示， </p>\n<ul>\n<li>EdgeInsets.all(value),设置四个方向一样的值</li>\n<li>EdgeInsets.only(left:val1,top:left2,bottom:val3,right:val4),单独设置某个方向的值，这个可以同时设置四个方向的值，类似于EdgeInsets.fromLTRB</li>\n<li>EdgeInsets.symmetric(horizontal: val1, vertical: val2),用于设置水平/垂直方向上的值，例如水平方向设置为10，那么子元素的左右内边距分别为10.</li>\n<li>EdgeInsets.fromLTRB(left,top,right,bottom)按照左上右下的顺序分别设置内边距的值</li>\n</ul>\n</li>\n<li><p>Color 关于flutter中color值的表示方法：</p>\n<ul>\n<li>color:Colors.red / Colors.red[100] 对应的颜色英文单词</li>\n<li>color:Color.fromRGBO rgb值,o代表透明度</li>\n<li>color:Color.fromARGB a:Alpha(透明度通道)+RGB色彩模式, 例如：#1e000000，前面两位表示16进制的透明度</li>\n</ul>\n</li>\n<li><p>Decoration Container容易常用的是boxDecoration，继承自Decoration类。</p>\n<ul>\n<li><p>边框：border </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置四条黑色的宽度为3的边框</span><br><span class=\"line\">BoxDecoration(</span><br><span class=\"line\">  border: Border.all(color: Colors.black, width: 3, style: BorderStyle.solid)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置单边框：上边框为3px粗细的黑色实线边框，右边框为1px粗细的红色实线边框</span><br><span class=\"line\">BoxDecoration(</span><br><span class=\"line\">  border: Border(</span><br><span class=\"line\">    top: BorderSide(color: Colors.black, width: 2, style: BorderStyle.solid),</span><br><span class=\"line\">    right: BorderSide(color: Colors.red, width: 2, style: BorderStyle.solid),</span><br><span class=\"line\">  ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/07/13/flutter-widgets/color1.PNG\" alt><br><img src=\"/2019/07/13/flutter-widgets/color2.PNG\" alt></p>\n</li>\n<li><p>阴影 shadow，和css3中shadow的定义基本上一致，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BoxDecoration(</span><br><span class=\"line\">  boxShadow: [</span><br><span class=\"line\">    BoxShadow(</span><br><span class=\"line\">      offset: Offset(0, 0),</span><br><span class=\"line\">      blurRadius: 6,</span><br><span class=\"line\">      spreadRadius: 10,</span><br><span class=\"line\">      color: Color.fromARGB(20, 0, 0, 0),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/07/13/flutter-widgets/shadow.PNG\" alt></p>\n</li>\n<li><p>圆角 borderRadius</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 同时设置4个角的圆角为5</span><br><span class=\"line\">BoxDecoration(</span><br><span class=\"line\">  borderRadius: BorderRadius.circular(5),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置单圆角：左上角的圆角为5，右上角的圆角为10</span><br><span class=\"line\">BoxDecoration(</span><br><span class=\"line\">  borderRadius: BorderRadius.only(</span><br><span class=\"line\">    topLeft: Radius.circular(5),</span><br><span class=\"line\">    topRight: Radius.circular(10),</span><br><span class=\"line\">  ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/07/13/flutter-widgets/borderRadius.PNG\" alt></p>\n</li>\n<li><p>渐变 gradient</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 从左到右，黄色到蓝色的线性渐变</span><br><span class=\"line\">BoxDecoration(</span><br><span class=\"line\">  gradient: LinearGradient(</span><br><span class=\"line\">    begin: Alignment.centerLeft,</span><br><span class=\"line\">    end: Alignment.centerRight,</span><br><span class=\"line\">    colors: [Colors.yellow, Colors.blue],</span><br><span class=\"line\">  ),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// 从中心向四周扩散，黄色到蓝色的径向渐变</span><br><span class=\"line\">BoxDecoration(</span><br><span class=\"line\">  gradient: RadialGradient(</span><br><span class=\"line\">    center: Alignment.center,</span><br><span class=\"line\">    colors: [Colors.yellow, Colors.blue],</span><br><span class=\"line\">  ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/07/13/flutter-widgets/%E5%BE%84%E5%90%91graident.PNG\" alt><br><img src=\"/2019/07/13/flutter-widgets/really_graident.PNG\" alt></p>\n</li>\n<li><p>盒约束 Constraints</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 容器的大小将被限制在[100*100 ~ 200*200]内</span><br><span class=\"line\">BoxConstraints(</span><br><span class=\"line\">  minWidth: 100,</span><br><span class=\"line\">  maxWidth: 200,</span><br><span class=\"line\">  minHeight: 100,</span><br><span class=\"line\">  maxHeight: 200,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>二、文本组件</strong></p>\n<ul>\n<li>Text</li>\n</ul>\n<p>看一下他的构造函数(常用)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Text(</span><br><span class=\"line\">  this.data, &#123;  data 引号引起来用来显示文本信息</span><br><span class=\"line\">  Key key,</span><br><span class=\"line\">  this.style,文本的样式</span><br><span class=\"line\">  this.textAlign,文字的对齐方式</span><br><span class=\"line\">  this.softWrap,文字是否自动换行</span><br><span class=\"line\">  this.overflow,文字溢出所采取对应的操作</span><br><span class=\"line\">  this.maxLines,文字显示的最多行数</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Text文本比较容易理解，难点不多。源码有相关对应样式，一眼明了，不做多解释。</li>\n</ul>\n<hr>\n<ul>\n<li>Text.rich() 富文本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Text.rich(</span><br><span class=\"line\">    this.textSpan, 包裹text的容器&#123;</span><br><span class=\"line\">    Key key,</span><br><span class=\"line\">    this.style,</span><br><span class=\"line\">    this.strutStyle,</span><br><span class=\"line\">    this.textAlign,</span><br><span class=\"line\">    this.textDirection,</span><br><span class=\"line\">    this.locale,</span><br><span class=\"line\">    this.softWrap,</span><br><span class=\"line\">    this.overflow,</span><br><span class=\"line\">    this.textScaleFactor,</span><br><span class=\"line\">    this.maxLines,</span><br><span class=\"line\">    this.semanticsLabel,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Demo:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Text.rich(</span><br><span class=\"line\">   TextSpan(children:[ TextSpan(text:&apos;￥&apos;,style: TextStyle(color: Colors.red,fontSize: 50)),</span><br><span class=\"line\">        TextSpan(text:&apos;人民币&apos;,style: TextStyle(color: Colors.blue,fontSize: 25)) </span><br><span class=\"line\">     ])</span><br><span class=\"line\">    ),</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/07/13/flutter-widgets/text.rich.PNG\" alt></p>\n<hr>\n<p><strong>三、图片组件</strong></p>\n<ul>\n<li>关于图片的引入,直接看图吧，简单明了。</li>\n</ul>\n<p><img src=\"/2019/07/13/flutter-widgets/image.gif\" alt><br>在引入图片的时候有一个小技巧，在上图中，我的Image文件夹中存放两个image图片，但是有没有注意到我只是写了一句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assets:</span><br><span class=\"line\">    - image/</span><br></pre></td></tr></table></figure>\n\n<p>这个方式表示将引入该文件下所有image的图片，所以你不必像之前一样精确到该文件夹下的每一个image。</p>\n<ul>\n<li><p>关于加载图片资源的几种方式</p>\n<ul>\n<li><code>Image.asset</code> : 加载资源图片</li>\n<li><code>Image.file</code> : 加载本地图片文件</li>\n<li><code>Image.netWork</code> : 加载网络图片</li>\n<li><code>Image.memory</code> : 加载Uint8List资源图片    </li>\n</ul>\n</li>\n<li><p>Image的常用属性:</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">属性名</th>\n<th align=\"center\">类型</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">width/height</td>\n<td align=\"center\">double</td>\n<td align=\"center\">Image容器的宽高</td>\n</tr>\n<tr>\n<td align=\"center\">fit</td>\n<td align=\"center\">BoxFit</td>\n<td align=\"center\">图片的填充模式</td>\n</tr>\n<tr>\n<td align=\"center\">color</td>\n<td align=\"center\">Color</td>\n<td align=\"center\">图片颜色</td>\n</tr>\n<tr>\n<td align=\"center\">colorBlendMode</td>\n<td align=\"center\">BlendMode</td>\n<td align=\"center\">对图层颜色进行混合处理</td>\n</tr>\n<tr>\n<td align=\"center\">alignment</td>\n<td align=\"center\">Alignment</td>\n<td align=\"center\">控制图片的摆放位置</td>\n</tr>\n<tr>\n<td align=\"center\">repeat</td>\n<td align=\"center\">ImageRepeat</td>\n<td align=\"center\">设置图片重复</td>\n</tr>\n<tr>\n<td align=\"center\">centerSlice</td>\n<td align=\"center\">Rect</td>\n<td align=\"center\">可以从矩形图片的9个方向点分别进行拉伸，使图片变形</td>\n</tr>\n</tbody></table>\n<ul>\n<li>图片的充满方式，可以看下图<br><img src=\"/2019/07/13/flutter-widgets/fit1.PNG\" alt><br><img src=\"/2019/07/13/flutter-widgets/fit2.PNG\" alt><br>这是借鉴CSDN上一位大佬写的，放一下<a href=\"https://blog.csdn.net/poorkick/article/details/80458707\" target=\"_blank\" rel=\"noopener\">链接</a>,写的确实很不错。</li>\n</ul>\n<p><strong>四、图标组件</strong></p>\n<ul>\n<li><p>图标</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">icon:Icon(Icons.xxx)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>IconButton 图标按钮组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const IconButton(&#123;</span><br><span class=\"line\">    Key key,</span><br><span class=\"line\">    this.iconSize = 24.0, 默认图标的大小是24</span><br><span class=\"line\">    this.padding = const EdgeInsets.all(8.0),默认图标的内边距为8</span><br><span class=\"line\">    this.alignment = Alignment.center,icon的对齐方式</span><br><span class=\"line\">    @required this.icon, icon图标</span><br><span class=\"line\">    this.color,可设置图标的颜色</span><br><span class=\"line\">    this.highlightColor,长按时Iconbutton的背景颜色</span><br><span class=\"line\">    this.splashColor,长按超过一定时间，边框出现的特效颜色</span><br><span class=\"line\">    this.disabledColor,禁用时的颜色</span><br><span class=\"line\">    @required this.onPressed,</span><br><span class=\"line\">    this.tooltip,按下时的提示,会和splashColor冲突</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>看一下demo吧<br><img src=\"/2019/07/13/flutter-widgets/iconbutton.gif\" alt></p>\n<ul>\n<li>FloatActingButton 浮动按钮组件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return MaterialApp(</span><br><span class=\"line\">      home: Scaffold(</span><br><span class=\"line\">       floatingActionButton: FloatingActionButton(</span><br><span class=\"line\">          child: Icon(Icons.add),</span><br><span class=\"line\">       ),</span><br><span class=\"line\">       floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><img src=\"/2019/07/13/flutter-widgets/floatActingButton.PNG\" alt></p>\n<ul>\n<li>RaisedButton 凸起按钮组件<br>没什么特殊的地方，同样是继承MaterialButton类，相对于MaterialButton添加了点击的动态效果，以及背景颜色<br><img src=\"/2019/07/13/flutter-widgets/RaisedButton.PNG\" alt></li>\n</ul>\n<p><strong>五、列表组件</strong></p>\n<ul>\n<li>基础列表组件 ListView  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListView(&#123;</span><br><span class=\"line\">   Key key,</span><br><span class=\"line\">   Axis scrollDirection = Axis.vertical, 列表的排列方向，默认为垂直排列，Axis.horizontal为水平排列</span><br><span class=\"line\">   bool reverse = false,组件是否反向排列</span><br><span class=\"line\">   ScrollController controller,滑动监听</span><br><span class=\"line\">   bool primary, false，如果内容不足，则用户无法滚动 而如果[primary]为true，它们总是可以尝试滚动。</span><br><span class=\"line\">   ScrollPhysics physics,相关的滚动事件</span><br><span class=\"line\">   bool shrinkWrap = false, 内容适配</span><br><span class=\"line\">   EdgeInsetsGeometry padding, 内部边距</span><br><span class=\"line\">   this.itemExtent,确定每一个item的高度 会让item加载更加高效</span><br><span class=\"line\">   double cacheExtent, 设置预加载的区域 </span><br><span class=\"line\">   List&lt;Widget&gt; children = const &lt;Widget&gt;[],</span><br><span class=\"line\">   int semanticChildCount,</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<pre><code>Tips:</code></pre><ul>\n<li>physics:可选择的属性值<br>   AlwaysScrollableScrollPhysics() 总是可以滑动<br>   NeverScrollableScrollPhysics()禁止滚动<br>   BouncingScrollPhysics() 内容超过一屏 上拉有回弹效果<br>   ClampingScrollPhysics() 包裹内容 不会有回弹</li>\n</ul>\n<ul>\n<li>ListTile <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return ListTile(</span><br><span class=\"line\">   leading: Icon(Icons.home),</span><br><span class=\"line\">   title: Text(item.title),</span><br><span class=\"line\">   //  subtitle: Text(&quot;SubTitle&quot;),</span><br><span class=\"line\">   trailing:Icon(Icons.keyboard_arrow_right),</span><br><span class=\"line\">   contentPadding:EdgeInsets.all(10),</span><br><span class=\"line\">   onTap: ()&#123;</span><br><span class=\"line\">     print(&quot;我点了一下&quot;);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   onLongPress: ()&#123;</span><br><span class=\"line\">     print(&quot;进行了长按操作&quot;);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"> ) ;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><img src=\"/2019/07/13/flutter-widgets/listTile.PNG\" alt></p>\n<ul>\n<li>ListView.builder 构造列表</li>\n</ul>\n<p>看一下demo吧。<br><img src=\"/2019/07/13/flutter-widgets/listview.builder.PNG\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main() =&gt; runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">     home: Scaffold(</span><br><span class=\"line\">       body: ListView.builder(</span><br><span class=\"line\">         itemCount: Items.length,</span><br><span class=\"line\">         itemBuilder: (_,int index)&#123;</span><br><span class=\"line\">           return MessageItem(Items[index]);</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">       ),</span><br><span class=\"line\">     ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">List&lt;Item&gt; Items = [</span><br><span class=\"line\">  Item(&quot;title1&quot;),</span><br><span class=\"line\">  Item(&quot;title2&quot;),</span><br><span class=\"line\">  Item(&quot;title3&quot;),</span><br><span class=\"line\">  Item(&quot;title4&quot;),</span><br><span class=\"line\">  Item(&quot;title5&quot;),</span><br><span class=\"line\">];</span><br><span class=\"line\">class Item &#123;</span><br><span class=\"line\"> String title;</span><br><span class=\"line\"> Item(this.title);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class MessageItem extends StatelessWidget &#123;</span><br><span class=\"line\">  final Item item ;</span><br><span class=\"line\">  MessageItem(this.item);</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return ListTile(</span><br><span class=\"line\">      leading: Icon(Icons.home),</span><br><span class=\"line\">      title: Text(item.title),</span><br><span class=\"line\">      //  subtitle: Text(&quot;SubTitle&quot;),</span><br><span class=\"line\">      trailing:Icon(Icons.keyboard_arrow_right),</span><br><span class=\"line\">      contentPadding:EdgeInsets.all(10),</span><br><span class=\"line\">      onTap: ()&#123;</span><br><span class=\"line\">        print(&quot;我点了一下&quot;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      onLongPress: ()&#123;</span><br><span class=\"line\">        print(&quot;进行了长按操作&quot;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ) ;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要通过数组来进行查询列表项，所以提前构建好列表项的组件，并存放在builder方法调用的数组中。</p>\n<p>深入了解可查看<a href=\"https://blog.csdn.net/hao_m582/article/details/84112278\" target=\"_blank\" rel=\"noopener\">此篇博客</a></p>\n<ul>\n<li>GridView 网格列表组件<br>关于网格列表属性和ListView差不多，一般实现图片布局的时候会考虑此布局<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GridView(&#123;</span><br><span class=\"line\">    Key key,</span><br><span class=\"line\">    Axis scrollDirection = Axis.vertical,</span><br><span class=\"line\">    bool reverse = false,</span><br><span class=\"line\">    ScrollController controller,</span><br><span class=\"line\">    bool primary,</span><br><span class=\"line\">    ScrollPhysics physics,</span><br><span class=\"line\">    bool shrinkWrap = false,</span><br><span class=\"line\">    EdgeInsetsGeometry padding,</span><br><span class=\"line\">    @required this.gridDelegate,</span><br><span class=\"line\">    double cacheExtent,</span><br><span class=\"line\">    List&lt;Widget&gt; children = const &lt;Widget&gt;[],</span><br><span class=\"line\">    int semanticChildCount,</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>六、表单</strong><br>    - TextField</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const TextField(&#123;</span><br><span class=\"line\">  Key key,</span><br><span class=\"line\">  this.controller,</span><br><span class=\"line\">  this.decoration = const InputDecoration(),表单的样式，类似于Container中的BoxDecoration</span><br><span class=\"line\">  TextInputType keyboardType,设置弹起键盘的类型</span><br><span class=\"line\">  this.textCapitalization = TextCapitalization.none,</span><br><span class=\"line\">  this.style,输入的内容样式</span><br><span class=\"line\">  inputFormatters: [], //对输入的文字进行限制和校验</span><br><span class=\"line\">  this.textAlign = TextAlign.start,输入的内容文本对齐方式</span><br><span class=\"line\">  this.autofocus = false,自动获取焦点</span><br><span class=\"line\">  this.obscureText = false,是否隐藏输入的内容</span><br><span class=\"line\">  this.autocorrect = true,是否 自动纠正</span><br><span class=\"line\">  this.maxLines = 1,输入框最大的显示行数</span><br><span class=\"line\">  this.minLines,输入框最小的显示行数</span><br><span class=\"line\">  this.expands = false,是否平均分配宽度</span><br><span class=\"line\">  this.maxLength,允许输入文字的最大长度</span><br><span class=\"line\">  this.maxLengthEnforced = true,是否允许输入的字符长度超过限定的字符长度</span><br><span class=\"line\">  this.onChanged, 文本发生改变时的回调</span><br><span class=\"line\">  this.onSubmitted,文本提交时的回调</span><br><span class=\"line\">  this.cursorWidth = 2.0,</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return Center(</span><br><span class=\"line\">    child: Container(</span><br><span class=\"line\">      child: TextField(</span><br><span class=\"line\">        controller: controller,</span><br><span class=\"line\">        decoration: InputDecoration(</span><br><span class=\"line\">          labelText: &quot;我是label&quot;,</span><br><span class=\"line\">          prefixIcon: new Icon(Icons.people),</span><br><span class=\"line\">          suffixIcon: new Icon(Icons.people),</span><br><span class=\"line\">          hintText: &quot;我是hint，类似于h5的placeholder&quot;,</span><br><span class=\"line\">          errorText: &quot;输入错误&quot;,</span><br><span class=\"line\">          border: OutlineInputBorder()</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        style: TextStyle(fontSize: 15.0),</span><br><span class=\"line\">        onChanged: (val)&#123;</span><br><span class=\"line\">          print(controller.text);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        onSubmitted: (val)&#123;</span><br><span class=\"line\">          print(val);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/07/13/flutter-widgets/TextField.gif\" alt></p>\n<p>还有一个表单,TextFormField，需要用Form控件作为父级容器，用法和TextField是一样的，区别是他需要一个formKey值，并且自带验证,具体可以查看<a href=\"https://flutterchina.club/text-input/\" target=\"_blank\" rel=\"noopener\">官网</a>对这部分的介绍</p>\n<p>差不多就这些吧，谢谢。</p>\n","text":"Flutter常用组件容器组件文本组件图片组件图标组件图标组件图标按钮组件凸起按钮组件列表组件基础列表组件水平列表组件长列表组件网格列表组件表单组件一、容器组件Container类似于HTML中的Div（盒子），里面用来容纳子元素，自身具备一些属性，用来调整<br>子元素的位置及","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-Flutter","slug":"Flutter","count":4,"path":"api/tags/Flutter.json"}]},{"title":"flutter_chatSystem","slug":"flutter-chatSystem","date":"2019-07-07T14:20:21.000Z","updated":"2019-08-06T14:01:11.814Z","comments":true,"path":"api/articles/flutter-chatSystem.json","excerpt":"<p>今天复习了一下Flutter的布局，写了一个聊天的小demo。关于布局这一方面，没有什么可以记录的坑，所以直接贴代码看效果图吧</p>\n<p><img src=\"/2019/07/07/flutter-chatSystem/chatListPage.gif\" alt></p>\n<p>main.dart:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\">import &apos;chatPage.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main()=&gt; runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      home: Scaffold(</span><br><span class=\"line\">        appBar: AppBar(</span><br><span class=\"line\">          title: Text(&quot;聊天室&quot;),</span><br><span class=\"line\">          centerTitle: true,</span><br><span class=\"line\"></span><br><span class=\"line\">        ),</span><br><span class=\"line\">        body: ChatList()</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ChatList extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _ChatListState createState() =&gt; _ChatListState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _ChatListState extends State&lt;ChatList&gt; &#123;</span><br><span class=\"line\">  final title = &quot;花开不败&quot;;</span><br><span class=\"line\">  final titleStyle = TextStyle(color: Colors.black,fontWeight: FontWeight.bold,fontSize: 18.0);</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return ListView(</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            chatItem(&quot;image/avatar.ico&quot;, title, &quot;你在哪呢，你妈喊你回家吃饭了&quot;, &quot;十分钟前&quot;)</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Widget chatItem(String avatar , String title,String content,String time)&#123;</span><br><span class=\"line\">    return GestureDetector(</span><br><span class=\"line\">              child: Container(</span><br><span class=\"line\">                margin: const EdgeInsets.all(5),</span><br><span class=\"line\">                decoration: BoxDecoration(</span><br><span class=\"line\">                  // border: Border.all(color: Colors.black,width: 2)</span><br><span class=\"line\">                ),</span><br><span class=\"line\">                child: Row(</span><br><span class=\"line\">                children: &lt;Widget&gt;[</span><br><span class=\"line\">                  Image.asset(avatar,width: 50,height: 50,),</span><br><span class=\"line\">                  Container(</span><br><span class=\"line\">                      margin: const EdgeInsets.fromLTRB(15, 5, 5, 5),</span><br><span class=\"line\">                      child: Column(</span><br><span class=\"line\">                        crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">                        children: &lt;Widget&gt;[</span><br><span class=\"line\">                          Text(title,style: titleStyle,),</span><br><span class=\"line\">                          Text(content),</span><br><span class=\"line\">                        ],</span><br><span class=\"line\">                      ),</span><br><span class=\"line\">                    ),                </span><br><span class=\"line\">                    Expanded(</span><br><span class=\"line\">                      child: Container(</span><br><span class=\"line\">                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 20),</span><br><span class=\"line\">                        decoration: BoxDecoration(</span><br><span class=\"line\">                          // border: Border.all(color: Colors.red,width: 2.0)</span><br><span class=\"line\">                        ),</span><br><span class=\"line\">                        alignment: Alignment.topRight,</span><br><span class=\"line\">                        child: Text(time),</span><br><span class=\"line\">                      ),</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                ),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              onTap: ()&#123;</span><br><span class=\"line\">                Navigator.push(</span><br><span class=\"line\">                  context, MaterialPageRoute(</span><br><span class=\"line\">                    builder: (BuildContext context)&#123;</span><br><span class=\"line\">                      return ChatPage(title);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  )</span><br><span class=\"line\">                );</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// class MessageData&#123;</span><br><span class=\"line\">//   String avatar;</span><br><span class=\"line\">//   String title;</span><br><span class=\"line\">//   String chatContent;</span><br><span class=\"line\">//   String time;</span><br><span class=\"line\">//   MessageData(this.avatar,this.title,this.chatContent,this.time);</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// class Message extends StatefulWidget &#123;</span><br><span class=\"line\">//   @override</span><br><span class=\"line\">//   _MessageState createState() =&gt; _MessageState();</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// class _MessageState extends State&lt;Message&gt; &#123;</span><br><span class=\"line\">//   @override</span><br><span class=\"line\">//   Widget build(BuildContext context) &#123;</span><br><span class=\"line\">//     return Container(</span><br><span class=\"line\">      </span><br><span class=\"line\">//     );</span><br><span class=\"line\">//   &#125;</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// List MessageItem = [</span><br><span class=\"line\">//   MessageData(&quot;dsad&quot;,&quot;dsad&quot;,&quot;dsadas&quot;,&quot;dsad&quot;)</span><br><span class=\"line\">// ];</span><br></pre></td></tr></table></figure>","keywords":null,"cover":"/2019/07/07/flutter-chatSystem/chatListPage.gif","content":null,"text":"今天复习了一下Flutter的布局，写了一个聊天的小demo。关于布局这一方面，没有什么可以记录的坑，所以直接贴代码看效果图吧 [Figure] 未完待续。。。。","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-Flutter","slug":"Flutter","count":4,"path":"api/tags/Flutter.json"}]},{"title":"凑文章的一篇文章","slug":"凑文章的一篇文章","date":"2019-07-06T15:50:53.000Z","updated":"2019-08-06T14:01:12.220Z","comments":true,"path":"api/articles/凑文章的一篇文章.json","excerpt":"","keywords":null,"cover":null,"content":"<p>今天周六，忙碌了一周了，终于到了最喜欢的周日了，可以好好放松一下，这几天熬夜熬的肝疼，今晚打算早点睡，明天还有好多任务需要进行，Node.js，Vue都还没有写，下周公司项目要交付测试版，估计加班也要是家常便饭了，下班后还要学习英语，突然发现，到了一定的年纪，再去纠正英语的发音感觉好难啊，有一个单词，recognize : /‘rekəɡnaɪz/  承认、辨别，但是对于他的发音，之前一直是re|cog|nize, 读作 “瑞靠个乃zi”，今天特意去学习，发现音标发音实际上是“ruai kei ge naizi” ，而且对于单词的重音掌握的也不是很好，唉，青春落下的，终究是要还回来的。</p>\n<p>计划忙完这段时间，去好好学习一下Node,尝试一下用Vue的生态做个简易的手机网页端的实战，唉，现在小程序文还没有接触，原生JavaScript也没有深入，<br>最近看一些招聘信息，小程序挺火的，真得是。。。学到老，以后的几年里，就先向Flutter、Vue、小程序、Node方向发展吧，虽说Flutter最近挺火，但终究不及原生，目前大公司应该是没有团队完全使用Flutter开发项目吧，大部分都是试试水，只是去探索，相对来说，中小型公司可能更加注重使用，一套代码同时生成多端，能够在人力资金成本上节约了很大一部分，省时省力，当然，如果谷歌将生态完善到一定的程度，flutter终将是一大主流，以后我们也是赢在起跑线上的码农了，哈哈<br>工作了半年多了，唉，总感觉学到的东西好少，平时得多注重总结，多敲代码多练习。就这样吧，12点多了，今天养一下身子，早点休息了。晚安。。。</p>\n","text":"今天周六，忙碌了一周了，终于到了最喜欢的周日了，可以好好放松一下，这几天熬夜熬的肝疼，今晚打算早点睡，明天还有好多任务需要进行，Node.js，Vue都还没有写，下周公司项目要交付测试版，估计加班也要是家常便饭了，下班后还要学习英语，突然发现，到了一定的年纪，再去纠正英语的发音感","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-个人心得","slug":"个人心得","count":1,"path":"api/tags/个人心得.json"}]},{"title":"flutter弹窗系列（二） ","slug":"flutter弹窗系列（二）","date":"2019-07-05T14:34:01.000Z","updated":"2019-08-06T14:01:12.108Z","comments":true,"path":"api/articles/flutter弹窗系列（二）.json","excerpt":"<p>关于flutter的弹窗，有好几种,对于这些个人还是感觉很迷迷瞪瞪的，所以在这里分别写一些demo进行对比，并加以区分，只单纯作为笔记参考。</p>\n<p><strong>一、SimpleDialog</strong><br> 先看一下flutter中文网对SimpleDialog的解释：<br>    <img src=\"/2019/07/05/flutter弹窗系列（二）/SimpleDialog.PNG\" alt></p>\n<p> 顾名思义，这是一个简易的dialog，可能实现的功能不会太多，自己尝试着写了一个简单的demo，仅供参考。<br>   <img src=\"/2019/07/05/flutter弹窗系列（二）/SimpleDemo.gif\" alt><br>    这是个最简单的demo，就是控制台显示用户所点击的列表项，当然，你也可以在每个onPressed下面添加一个<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigator.of(context).pop();</span><br><span class=\"line\">//用户每次点击完成之后将自动关闭弹窗</span><br></pre></td></tr></table></figure></p>","keywords":null,"cover":"/2019/07/05/flutter弹窗系列（二）/SimpleDialog.PNG","content":null,"text":"关于flutter的弹窗，有好几种,对于这些个人还是感觉很迷迷瞪瞪的，所以在这里分别写一些demo进行对比，并加以区分，只单纯作为笔记参考。一、SimpleDialog<br> 先看一下flutter中文网对SimpleDialog的解释：<br>     [Figure] ","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-Flutter","slug":"Flutter","count":4,"path":"api/tags/Flutter.json"}]},{"title":"Git小白指令","slug":"Git小白指令","date":"2019-07-04T18:08:43.000Z","updated":"2019-08-06T14:01:11.785Z","comments":true,"path":"api/articles/Git小白指令.json","excerpt":"","keywords":null,"cover":null,"content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;因为最近写博客，需要上传GitHub,况且公司用的也是Git，所以准备花时间去学习一下，<br>&nbsp;&nbsp;&nbsp;&nbsp;关于Git的指令，参照廖雪峰老师的教程来的，然后下面记录一下</p>\n<ul>\n<li>git add ./xxx.txt  这个表示将写好的代码添加到本地的仓库 ，add . 表示直接添加目录下所有文件</li>\n<li>git commit -m “提交日志”  这个命令表示将添加到本地仓库的代码提交 ，</li>\n<li>git push -u origin master 表示将本地仓库的代码提交到github远程仓库，</li>\n<li>git pull origin master 表示将远程仓库的代码拉取与本地代码进行合并，</li>\n<li>git status  这个命令可以让我们了解当前仓库的状态，哪些文件已经修改但是还没有提交，</li>\n<li>git log 表示查看提交到git仓库的所有版本，</li>\n<li>git branch dev(分之的名称) 创建一个新的分支</li>\n<li>git checkout dev 选中新创建的分之进行操作</li>\n<li>git merge dev 在切换到master分支上 进行将dev分支的操作合并到master分支上</li>\n<li>git branch -d dev 将刚才已经操作过的分支删除</li>\n<li>git branch 查看当前所有分支</li>\n</ul>\n<p><strong>常见的报错</strong><br><em>一、</em> ![rejected] master-&gt; master( fetch first)  error failed to push some …</p>\n<p>出现的原因：出现这类问题大部分是因为上一次没有从远程直接拉取代码而直接上传。<br>解决方案：可以尝试 git pull origin master 先从远端拉取，再进行git push origin master</p>\n<center>未完待续.....</center>\n","text":"&nbsp;&nbsp;&nbsp;&nbsp;因为最近写博客，需要上传GitHub,况且公司用的也是Git，所以准备花时间去学习一下，<br>&nbsp;&nbsp;&nbsp;&nbsp;关于Git的指令，参照廖雪峰老师的教程来的，然后下面记录一下git add ./xxx.","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-Git笔记","slug":"Git笔记","count":2,"path":"api/tags/Git笔记.json"}]},{"title":"Flutter踩坑记---关于SimpleDialog报错","slug":"Flutter","date":"2019-07-04T17:52:00.000Z","updated":"2019-08-06T14:01:11.748Z","comments":true,"path":"api/articles/Flutter.json","excerpt":"<p>看了好久的官网，对于官方文档给的这个demo，始终不太明白，今天将报错百度了一下，终于解惑了。直接上SimpleDialog正确写法的demo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main() =&gt;runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget&#123;</span><br><span class=\"line\">  @override </span><br><span class=\"line\">  Widget build(BuildContext context)&#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      home: Dlog()</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Dlog extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _DlogState createState() =&gt; _DlogState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _DlogState extends State&lt;Dlog&gt; &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      home: Scaffold(</span><br><span class=\"line\">        body: Center(</span><br><span class=\"line\">          child: Container(</span><br><span class=\"line\">            child: MaterialButton(</span><br><span class=\"line\">              child: Text(&quot;点我一下&quot;),</span><br><span class=\"line\">              onPressed: ()&#123;</span><br><span class=\"line\">                showDialog(</span><br><span class=\"line\">                  context: context,</span><br><span class=\"line\">                  builder: (BuildContext context)&#123;</span><br><span class=\"line\">                    return SimpleDialog(</span><br><span class=\"line\">                      title: Text(&quot;我是title&quot;),</span><br><span class=\"line\">                      children: &lt;Widget&gt;[</span><br><span class=\"line\">                        SimpleDialogOption(</span><br><span class=\"line\">                          child: Text(&quot;选项一&quot;),</span><br><span class=\"line\">                          onPressed: ()&#123; print(&quot;选项一&quot;);&#125;,</span><br><span class=\"line\">                        ),</span><br><span class=\"line\">                        SimpleDialogOption(</span><br><span class=\"line\">                          child: Text(&quot;选项二&quot;),</span><br><span class=\"line\">                          onPressed: ()&#123; print(&quot;选项二&quot;);&#125;,</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                      ],</span><br><span class=\"line\">                    );</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                ).then((val)&#123;</span><br><span class=\"line\">                  print(val);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","keywords":null,"cover":"/2019/07/05/Flutter/simpleDialogError.PNG","content":null,"text":"看了好久的官网，对于官方文档给的这个demo，始终不太明白，今天将报错百度了一下，终于解惑了。直接上SimpleDialog正确写法的demo1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-Flutter","slug":"Flutter","count":4,"path":"api/tags/Flutter.json"}]},{"title":"Git--认知","slug":"git-学习笔记（一）","date":"2019-07-04T14:00:55.000Z","updated":"2019-08-06T14:01:12.182Z","comments":true,"path":"api/articles/git-学习笔记（一）.json","excerpt":"","keywords":null,"cover":null,"content":"<p>&nbsp;&nbsp;关于Git，借用廖雪峰老师的一句话，Git是目前世界上最先进的<strong>分布式</strong>版本控制系统（<strong>没有之一</strong>）。<br>记得进第一家公司的时候，当时是用的SVN，是一种<strong>集中式</strong>的版本控制系统，每天都去向中央服务器提交拉取代码，自我感觉体验良好。<br>可是为什么Git渐渐为大部分人所用呢，这就涉及到了集中式和分布式的区别：<br>&nbsp;&nbsp;<strong>集中式 ：</strong> 集中式的版本库是放在中央服务器的，每个工作人员需要进行代码推送或者拉取的时候，都是需要向这个中央服务器去发送请求，或者说都是需要经过这个中央服务器，<br>相当于把你们写过的代码保存到一个大的中央仓库里，可以保存 ，可以取出，但是每次取出之前需要提交上一次的保存，比较方便，不必担心自己电脑黑屏而导致代码丢失无法找回。<br>&nbsp;&nbsp;<strong>分布式 ：</strong> 分布式的版本库，类似于每个工作人员的电脑上都是一个最新的版本库，你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>\n<p>&nbsp;&nbsp;关于区别就写到这里吧 。 开始自己的笔记系列：<br>&nbsp;&nbsp;<strong>初次安装配置：</strong>(Windows上面安装)<br>&nbsp;&nbsp;&nbsp;&nbsp;一、首先去[Git中文网][1]下载Git版本控制客户端程序，一路Next。<br>&nbsp;&nbsp;&nbsp;&nbsp;二、下载完成后，点击鼠标右键，会发现有Git</p>\n<pre><code>未完待续。。。。。</code></pre>","text":"&nbsp;&nbsp;关于Git，借用廖雪峰老师的一句话，Git是目前世界上最先进的分布式版本控制系统（没有之一）。<br>记得进第一家公司的时候，当时是用的SVN，是一种集中式的版本控制系统，每天都去向中央服务器提交拉取代码，自我感觉体验良好。<br>可是为什么Git渐渐为大","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"-Git笔记","slug":"Git笔记","count":2,"path":"api/tags/Git笔记.json"}]},{"title":"FirstArticle","slug":"FirstArticle","date":"2019-07-03T14:18:40.000Z","updated":"2019-08-06T14:01:11.745Z","comments":true,"path":"api/articles/FirstArticle.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"爱学习，爱生活！（个人博客开启前端学习生涯）\"><a href=\"#爱学习，爱生活！（个人博客开启前端学习生涯）\" class=\"headerlink\" title=\"爱学习，爱生活！（个人博客开启前端学习生涯）\"></a><center>爱学习，爱生活！（个人博客开启前端学习生涯）<center></center></center></h1><hr>\n<p>  &emsp;&emsp;千呼万唤始出来，终于实现了简易的个人博客，计划是先在个人博客上面去记录一些前端学习笔记，后期再通过Node+Vue去实现一个正儿八经的个人主页！<br>  &emsp;&emsp;刚入行没多久，对于前端知识认识尚浅，只是见得技术更新实在是有点快，自学的时候，刚接触JQuery，感觉用起来好舒服啊，什么getElementById() ,querySelector(),全都一个“$”代替，简直写起来不要太爽，一个月后我出去找工作，公司要求用Vue去写后台管理的一个项目，当时心里想，难道还有比JQuery还要好用的js框架吗，直到两个周之后，我能够写一些简单的Vue小demo，才深深感到没有早点去接触这个框架，正如文档介绍所说：响应式，数据驱动视图，不再频繁的去操作DOM节点写一些交互，这些都是jQuery无法做到的，正如React Angular一样，类似于<strong>MVVM模式</strong>（M:Model，V：View，VM：数据驱动视图层），<br>  ,我们将更多的时间放在了逻辑处理上，更大程度上释放了DOM，进一步提高了性能<br>  &emsp;&emsp;总之，前端变化之快，<strong>React</strong>，<strong>TypeScript</strong>，以及最近大火的<strong>Flutter</strong>，前端就是这样，只能不断的学习，才能去拥抱变化。也是之所以先搭建了简易博客的原因之一，就是想不断督促自己去学习,只有这样，才能去实现个人小小的梦想。    </p>\n","text":"爱学习，爱生活！（个人博客开启前端学习生涯）  &emsp;&emsp;千呼万唤始出来，终于实现了简易的个人博客，计划是先在个人博客上面去记录一些前端学习笔记，后期再通过Node+Vue去实现一个正儿八经的个人主页！<br>  &emsp;&emsp;刚入行没多久，对于前端知识认","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"个人心得","slug":"个人心得","count":1,"path":"api/tags/个人心得.json"}]}]}